
import React, {Component} from 'react';
import {render} from 'react-dom';
import PropTypes from 'prop-types';
import styled, { css } from 'styled-components';
import 'whatwg-fetch';
import md5 from "blueimp-md5"
import { getCookie} from '@/utils/public';
import Server from '@/utils/server';
import MobileDetect from 'mobile-detect';
require("babel-polyfill");



const TrackTag = styled.div ``;
let trackData,startClientX,startClientY,minRange,trackSign,trackDataLength;
minRange=30;
trackDataLength=8;// 条数较大会报错500,比如10条时

function TrackCollector(WrappedComponent) {

    class Track extends Component {

        constructor(props) {
            super();
            this.state = {};
        }
        componentDidMount() {
            const {track} = this.props;
            console.log(track)
            const {name='',extra={},type=''} = track;
            if(type==='view'){
                // 这里延时执行是为了等待html中的trackPathname执行完以后再执行，否则会获取到错误的trackPathname
                setTimeout(saveStrackData(track),300)
            }
            window.onbeforeunload = (e) => {
                // trackSign = localStorage.getItem('trackSign')
                // if( trackSign*1 >0){
                //     this.postTrackData()
                // }
            }
        }
        async handleClick(event){
            const { track,stopPropagation } = this.props;
            const {name,extra={},type='click'} = track;
            if(type==='click'){
                this.props.handleClick && this.props.handleClick(event);
                // ga统计
                sendEvent('B100',name,JSON.stringify(extra));
                if(stopPropagation===true) event.stopPropagation();
                saveStrackData(track);
            }
        }
        render() {
                const { track,handleClick,handleTouchStart,handleTouchEnd,onTouchMove, ...rest } = this.props;
                return (
                    <WrappedComponent {...rest} onClick={this.handleClick.bind(this)} handleClick={handleClick} onTouchMove={this.handleTouchMove} onTouchStart={this.handleTouchStart}  onTouchEnd={this.handleTouchEnd} >{this.props.children}</WrappedComponent>
                );
        }
    }
    Track.propTypes = {
        track                : PropTypes.object,
        stopPropagation      : PropTypes.bool
    };
    Track.defaultProps = {
        track                : {name:'',extra:{},type:''},
        stopPropagation      : false
    };
    return Track

}

export default TrackCollector;


function TcFnc(track) {
    const {name,extra={},type='click'} = track;
    // ga统计
    sendEvent('B100',name,JSON.stringify(extra));
    saveStrackData(track);
}
export { TcFnc }


//转换／初始化埋点数据结构
function getTrackData(){
    trackData = localStorage.getItem('trackData');
    trackData = JSON.parse( trackData );
    // 判断是否有初始值
    if(Object.prototype.toString.call(trackData)!=='[object Object]'){
        trackData={};
        trackData.basic_info=[];
        trackData.event_list=[];
    }
}

// 获取手机信息
function getPhoneInfo(basic_info){
    var device_type = navigator.userAgent;//获取userAgent信息
    var md = new MobileDetect(device_type);//实例化mobile-detect
    const platform = basic_info.platform?basic_info.platform:md.is('iPhone')?'iOS':'android';//系统
    const brand = basic_info.brand?basic_info.brand:md.mobile()?md.mobile():'';  //手机型号
    const ua = basic_info.ua?basic_info.ua:md.userAgent()?md.userAgent():'';  //userAgent

    return {platform,brand,ua}
}

// 获取基础信息
function getBasicInfo(){
    let basic_info={};
    let basicArry =[
        'user_id','token','province_id','wenli','score','score_diploma_id','score_rank','score_type','score_batch',
        'appid','sys_version','vcode','vname','channel','platform','interface_v',
        'brand','deviceuid','net_type',
        'select_course','course_ids',
        'senior_province_id','senior_city_id','senior_region_id','senior_school_id',
        'sdk','platform','ua','session_id',
        'diploma_id'];
    for (const item of basicArry){
        basic_info = Object.assign(basic_info,{[item]:getCookie(item)?getCookie(item):''});
    }
    return basic_info
}

// 获取事件信息
function getEventInfo(track){
    const {name,extra={},type='click'} = track;
    const client_time = new Date().getTime();//事件发生时间（毫秒）
    const event_category = type;//事件类型（view\click）
    const title = document.title; //页面标题
    const location = window && window.trackPathname?window.trackPathname:window.location.pathname;  //当前页面
    let referer = localStorage.getItem('trackReferrer') || 'no-page';//上一个页面的ID
    const target = name;//点击事件的name
    const nameAurl = md5(target+location);
    const eventInfo= {client_time,event_category,referer,location,target,title,nameAurl,extra};
    return eventInfo
}

// 保存本次收集的埋点信息
function saveStrackData(track){
    getTrackData();
    let basic_info =getBasicInfo();
    const phoneInfo = getPhoneInfo(basic_info);
    basic_info = Object.assign( basic_info, phoneInfo);
    trackData['basic_info'] = basic_info;

    const eventInfo = getEventInfo(track);
    trackData['event_list'].push(eventInfo);
    trackSign = localStorage.getItem('trackSign');
    trackSign=Number( localStorage.getItem('trackSign') );
    trackSign = trackSign!=='null'?trackSign:0;
    trackSign+=1;
    trackData = JSON.stringify(trackData);
    localStorage.setItem('trackSign', trackSign);
    localStorage.setItem('trackData',trackData);
    // 防止请求借口失败，那么下一次点击事件以后可以继续提交
    if(trackSign>=trackDataLength){
        postTrackData();
    }
}

// 清除收集的信息
function cleanTrackData(){
    trackData={};
    trackData.basic_info={};
    trackData.event_list=[];
    trackData = JSON.stringify(trackData);
    localStorage.setItem('trackSign', 0);
    localStorage.setItem('trackData',trackData);
}

// 上传数据
function postTrackData(){
    Server.post('/track', JSON.parse(trackData))
    .then(res => {
        if(res.code===0){
            cleanTrackData();
        }
    })
}



// name 书写规则，页面title的拼音首字母缩写加上语义化的事件名，同时更新对应的表

// 埋点函数使用
// TcFnc( {name,extra,type} )
// name        埋点名字，必需
// extra={}    额外的参数(Object)，非必须
// type        事件类型(String)，可以为任何值，但是只会统计（'click','view'）,选填


// 示例：
// import {TC,TcFnc} from '@/components';
// test = () =>{
//      TcFnc( {name:'yxxq_test',extra:{sch_id:'123',isVip:true},type:'view'} )
// }



// 埋点组件使用:
//
//
// 组件上可以使用的属性：
//     track                //对象,里面包含name,extra,type三个字段，name为必填字段,type和extra为非必须字段，type默认值为'click',extra默认值为{}
//     stopPropagation     //是否阻止冒泡（非必填，默认为false）
//     handleClick         //点击事件（埋点组件上使用handleClick代替onClick）
//
//
// 示例：
//
// import {TC} from '@/components';
// const Track = TC(styled.div``)
//
//
//
// <Track track={ {name:'yxxq_test',extra:{sch_id:'123',isVip:true},type:'view'} } handleClick={this.attension} />

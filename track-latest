
let trackEventList = [];
const trackConfig = {
    "version": "1.0",
    "threshold": 4, //最大存储数量
    "project": "wmzy-ui-common-services", //项目名称
    "url": "https://collector.wmzy.com/log-collect/app-behavior-upload",
    "priority": "url",//可选url，cookie。出现同样的数据，那个优先级更高，默认url
    "extraBasic": { aaa: 666 },
    "extraEvent": { bbb: 9999 },
    "basicInfoKeysReg": /^_/,//匹配到的字符串变为空
    "basicInfoKeys": [
        "user_id",
        "token",
        "senior_province_id",
        "senior_city_id",
        "senior_region_id",
        "senior_school_id",
        "score",
        "score_rank",
        "score_type",
        "score_batch",
        "score_diploma_id",
        "province_id",
        "wenli",
        "select_course",
        "rank",
        "device_id",
        "interface_v",
        "net_operators",
        "_appid",
        "_platform",
        "_deviceuid",
        "_channel",
        "_vcode",
        "_vname",
        "_brand",
        "_net_type",
        "_sys_version",
        // 抓包之外
        "appid",
        "course_ids",
        "sdk",
        "ua",
        "session_id",
        "diploma_id"
    ]

}
function TcFnc(track) {
    track =
        typeof track === "string"
            ? {
                name: track,
                extra: {},
                type: "click"
            }
            : extend(
                {
                    name: "",
                    extra: {},
                    type: "click"
                },
                track
            );
    const { type = "click" } = track;
    if (type === "view") {
        // 这里延时执行是为了等待html中的trackPathname执行完以后再执行，否则会获取到错误的trackPathname
        setTimeout(saveTrackInfo(track), 1000);
    }
    else {
        saveTrackInfo(track)
    }

}

// ajax请求
function ajax(url, data, callback) {
    var ajax = new XMLHttpRequest();
    ajax.onreadystatechange = function () {
        if (ajax.readyState == 4 && ajax.status == 200) {
            var msg = ajax.responseText;
            console.log(msg);
            callback();
        }
    };

    ajax.open("post", url);
    ajax.setRequestHeader("content-type", "application/json");
    ajax.send(JSON.stringify(data));
}

//转换／初始化埋点数据结构
function getTrackEventList() {
    trackEventList = localStorage.getItem("trackEventList");
    trackEventList = JSON.parse(trackEventList);
    // 判断是否有初始值
    if (Object.prototype.toString.call(trackEventList) !== "[object Array]") {
        trackEventList = [];
    }
}


function saveTrackInfo(track) {
    window && window.sendEvent && sendEvent("新埋点统计表", name, JSON.stringify(extra));
    saveStrackData(track);
}

// 获取手机信息
function getPhoneInfo() {
    var ua = typeof (window) === 'object' ? window.navigator.userAgent : "";
    var isIPhone = ua.indexOf("iPhone") >= 0;
    var isAndroid = ua.indexOf("Android") >= 0;
    var platform = isIPhone ? "iOS_h5" : isAndroid ? "android_h5" : "PC";
    var brand = isIPhone ? "iPhone" : ua.substring(ua.indexOf(";", 25) + 1, ua.indexOf("Build")).trim();
    return { platform, brand, ua };
}

// 获取基础信息
function getBasicInfo(track) {
    let basicArry = trackConfig.basicInfoKeys ? trackConfig.basicInfoKeys : [];

    const cookieParams = getCookieParams();
    const urlParams = getUrlParams();
    let basicInfo;
    if (trackConfig.priority === 'cookie') {
        basicInfo = extend(urlParams, cookieParams)
    }
    else {
        basicInfo = extend(cookieParams, urlParams)
    }
    let newbBasicInfo = {}
    for (const item in basicInfo) {
        console.log(item, basicInfo[item])
        if (basicArry.indexOf(item) > -1) {
            const newItem = item.replace(trackConfig.basicInfoKeysReg, '');
            if (basicInfo[item] !== "" && basicInfo[item] !== "undefined") {
                newbBasicInfo = extend(newbBasicInfo, { [newItem]: basicInfo[item] })
            }
        }
    }
    console.log(Object.prototype.toString.call(trackConfig.extraBasic) === "[object Object]")
    if (trackConfig.extraBasic && Object.prototype.toString.call(trackConfig.extraBasic) === "[object Object]") {
        newbBasicInfo = extend(newbBasicInfo, trackConfig.extraBasic)
    }
    if (track.onlyExtraBasic === true) {
        newbBasicInfo = track.extraBasic;
    }
    else if (track.extraBasic && Object.prototype.toString.call(track.extraBasic) === "[object Object]") {
        newbBasicInfo = extend(newbBasicInfo, track.extraBasic)
    }
    return newbBasicInfo;
}

// 获取事件信息
function getEventInfo(track) {
    var { name, extra = {}, type = "click", event_category } = track;
    const client_time = new Date().getTime().toString(); //事件发生时间（毫秒）
    event_category = event_category || type; //事件类型（view\click）
    const title = document.title; //页面标题
    const location =
        window && window.trackPathname
            ? window.trackPathname
            : window.location.pathname; //当前页面
    let referer = localStorage.getItem("trackReferrer") || "no-page";
    const target = name; //点击事件的name
    const nameAurl = typeof (md5) === 'undefined' ? '' : md5(target + location);
    const eventInfo = {
        client_time,
        event_category,
        referer,
        location,
        target,
        title,
        nameAurl,
        extra
    };
    return eventInfo;
}

// 保存本次收集的埋点信息
function saveStrackData(track) {
    getTrackEventList();
    // 一条新的埋点信息
    let eventInfo = getEventInfo(track);
    if (trackConfig.extraEvent && Object.prototype.toString.call(trackConfig.extraEvent) === "[object Object]") {
        eventInfo = extend(eventInfo, trackConfig.extraEvent)
    }
    if (track.extraEvent && Object.prototype.toString.call(track.extraEvent) === "[object Object]") {
        eventInfo = extend(eventInfo, track.extraEvent)
    }


    trackEventList.push(eventInfo);
    localStorage.setItem("trackEventList", JSON.stringify(trackEventList));
    // 防止请求借口失败，那么下一次点击事件以后可以继续提交
    if (trackEventList.length >= trackConfig.threshold) {
        postTrackData(track);
    }
    if (trackEventList.length >= trackConfig.threshold * 2) {
        cleanTrackData();
    }
}

// 清除收集的信息
function cleanTrackData() {
    trackEventList = [];
    localStorage.setItem("trackEventList", JSON.stringify([]));
}

// 上传数据
function postTrackData(track) {
    var basic_info = getBasicInfo(track);
    var phoneInfo = getPhoneInfo(basic_info);
    basic_info = Object.assign(basic_info, phoneInfo);
    basic_info.project = trackConfig.project;
    var trackData = {};
    trackData["basic_info"] = basic_info;
    trackData["event_list"] = trackEventList;
    trackData["version"] = trackConfig.version;
    // 请求数据是否可以压缩一下
    ajax(trackConfig.url, trackData, function () {
        // localStorage.setItem("trackList", JSON.stringify(trackList));
        cleanTrackData();
    });
}

function getCookieParams(params) {
    var cookie = document && document.cookie;
    var obj = {};
    var cookieObject = {};
    var i, l;

    if (!cookie || cookie === "") {
        return obj;
    }

    cookie = cookie.split("; ");

    for (i = 0, l = cookie.length; i < l; i++) {
        var item = cookie[i].split("=");
        cookieObject[item[0]] = item[1];
    }
    obj = extend(obj, cookieObject);
    return obj;
}

function getUrlParams(params) {
    var search = location.search.length > 0 ? location.search.substring(1) : "";
    var searchArray = search.length > 0 ? search.split("&") : []; // 获取链接上已有的参数
    var searchObject = {};
    var obj = {};
    var i, l;

    for (i = 0, l = searchArray.length; i < l; i++) {
        var item = searchArray[i].split("=");
        searchObject[item[0]] = item[1];
    }

    obj = extend(obj, searchObject);

    return obj;
}
// 对象合并
function extend(target, obj) {
    if (obj) target = target || {};

    for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
            if (obj[key] && obj[key].constructor === Object) {
                target[key] = extend(target[key], obj[key]);
            } else {
                target[key] = obj[key];
            }
        }
    }

    return target;
}

export { TcFnc };

// TcFnc({
//     name: 'heat-home-view',
//     type: 'view',
//     extraBasic:{},
//     onlyExtraBasic:false,//默认false，是不是仅接受传入的basicInfo
//     extraEvent:{}
// })
